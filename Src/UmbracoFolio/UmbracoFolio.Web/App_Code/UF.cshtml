@using Umbraco.Web;
@using Umbraco.Web.Models;
@using Umbraco.Core.Models.PublishedContent;
@using System.Web.Mvc
@using System.Web.Mvc.Html

@helper RenderNavListItem(Link link, string currentPagePath, string classes)
{
    var activeClass = UmbracoFolio.Web.Helpers.NavigationHelper.IsPageActive(link.Url, currentPagePath)
                        ? "uk-active"
                        : "";

    <li class="@activeClass @classes"><a href="@link.Url">@link.Name</a></li>
}

@helper RenderBlockComponent(System.Web.Mvc.HtmlHelper html, Umbraco.Core.Models.Blocks.BlockListItem block, string classes = "")
{
    if (block?.ContentUdi == null) { return; }
    var data = block.Content;

    @html.Partial("BlockList/Components/" + data.ContentType.Alias, block, new ViewDataDictionary { { "classes", classes } })
}

@functions{
    public static string GetArticleDate(Umbraco.Web.PublishedModels.IUfDisplayDate articleDate)
    {
        if (articleDate == null) return null;

        return !string.IsNullOrEmpty(articleDate.DisplayDateOverride)
            ? articleDate.DisplayDateOverride
            : FormatDate(articleDate.DisplayDate);
    }

    public static string FormatDate(DateTime date)
    {
        if (date == DateTime.MinValue) return null;

        return date.ToString("dd MMM yy");
    }

    public static string FormatHtmlDate(DateTime date)
    {
        if (date == DateTime.MinValue) return null;

        return date.ToString("yyyy-MM-dd");
    }

    public static UmbracoFolio.Web.Models.NextPrevious<IPublishedContent> GetNextAndPreviousPages(IPublishedContent currentPage)
    {
        var siblingList = currentPage.SiblingsAndSelf().ToList();
        var currentIndexInNewsList = siblingList.FindIndex(x => x.Id == currentPage.Id);
        var totalResults = siblingList.Count();

        var previousItem = siblingList.ElementAtOrDefault(currentIndexInNewsList - 1);
        var nextItem = siblingList.ElementAtOrDefault(currentIndexInNewsList + 1);

        return new UmbracoFolio.Web.Models.NextPrevious<IPublishedContent>
        {
            Next = nextItem,
            Previous = previousItem
        };
    }
}